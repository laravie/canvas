#!/usr/bin/env php
<?php

$workingPath = getcwd();

define('CANVAS_WORKING_PATH', $workingPath);

require $_composer_autoload_path ?? __DIR__.'/vendor/autoload.php';

$testbenchConfig = Orchestra\Testbench\Foundation\Config::loadFromYaml(
    workingPath: $workingPath,
    defaults: [
        'providers' => [],
        'dont-discover' => [],
    ],
);

$laravel = Orchestra\Testbench\container(
    options: $testbenchConfig,
    resolvingCallback: function ($app) use ($testbenchConfig) {
        (new Orchestra\Testbench\Foundation\Bootstrap\StartWorkbench($testbenchConfig))->bootstrap($app);

        (new Orchestra\Testbench\Foundation\Bootstrap\LoadMigrationsFromArray(
            $testbenchConfig['migrations'] ?? [],
            $testbenchConfig['seeders'] ?? false,
        ))->bootstrap($app);

        tap($app->make(Illuminate\Console\Generators\PresetManager::class), function ($manager) {
            $manager->setDefaultDriver('package');
        });
    }
);

$canvasConfig = ['preset' => Orchestra\Canvas\Canvas::presetFromEnvironment($workingPath)];

if (file_exists($workingPath.DIRECTORY_SEPARATOR.'canvas.yaml')) {
    $canvasConfig = Symfony\Component\Yaml\Yaml::parseFile($workingPath.DIRECTORY_SEPARATOR.'canvas.yaml');
}

$files = new Illuminate\Filesystem\Filesystem();

$preset = Orchestra\Canvas\Canvas::preset(
    $canvasConfig, $workingPath, $files
);

$app = new Symfony\Component\Console\Application('Canvas for Laravel');

$app->setVersion(Composer\InstalledVersions::getPrettyVersion('orchestra/canvas'));

Illuminate\Support\Collection::make([
    // Orchestra\Canvas\Commands\Channel::class => true,
    // Orchestra\Canvas\Commands\Component::class => true,
    // Orchestra\Canvas\Commands\Console::class => true,
    // Orchestra\Canvas\Commands\ConsoleGenerator::class => true,
    // Orchestra\Canvas\Commands\Database\Cast::class => true,
    // Orchestra\Canvas\Commands\Database\Eloquent::class => true,
    // Orchestra\Canvas\Commands\Database\Factory::class => true,
    // Orchestra\Canvas\Commands\Database\Migration::class => true,
    // Orchestra\Canvas\Commands\Database\Observer::class => true,
    // Orchestra\Canvas\Commands\Database\Seeder::class => $preset->is('laravel'),
    // Orchestra\Canvas\Commands\Event::class => true,
    // Orchestra\Canvas\Commands\Exception::class => true,
    // Orchestra\Canvas\Commands\Job::class => true,
    // Orchestra\Canvas\Commands\Listener::class => true,
    // Orchestra\Canvas\Commands\Mail::class => true,
    // Orchestra\Canvas\Commands\Notification::class => true,
    // Orchestra\Canvas\Commands\Policy::class => true,
    // Orchestra\Canvas\Commands\Preset::class => ! file_exists("{$workingPath}/canvas.yaml"),
    // Orchestra\Canvas\Commands\Provider::class => true,
    // Orchestra\Canvas\Commands\Request::class => true,
    // Orchestra\Canvas\Commands\Resource::class => true,
    // Orchestra\Canvas\Commands\Routing\Controller::class => true,
    // Orchestra\Canvas\Commands\Routing\Middleware::class => true,
    // Orchestra\Canvas\Commands\Rule::class => true,
    // Orchestra\Canvas\Commands\Testing::class => true,
    // Orchestra\Canvas\Commands\StubPublish::class => true,
    // Orchestra\Canvas\Commands\View::class => true,
])->filter(fn ($value) => $value === true)
->keys()
->transform(fn ($command) => $laravel->make($command))
->transform(function ($command) {
    if ($command instanceof Illuminate\Console\Command || method_exists($command, 'setLaravel')) {
        $command->setLaravel($laravel);
    }

    return $command;
})
->each(fn ($command) => $app->add($command));

$preset->addAdditionalCommands($app);

$app->run();
